ROOT_PATH ?= $(abspath $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST))))))
BIN_PATH ?= $(ROOT_PATH)/.local/bin
KIND_VERSION ?= 0.8.1
KIND_CONFIG ?= config-multinode.yaml
KIND_VERBOSITY ?= 1
KIND_IMAGE_POSTFIX ?=

kind := $(BIN_PATH)/kind
CLUSTER_CONTEXT := kind-$(CLUSTER)

.PHONY: .deps/cluster.kind
.deps/cluster.kind: ## Get kind binary dependency
ifeq (,$(wildcard $(INSTALL_PATH)/kind))
	@$(MAKE) --no-print-directory -C $(APP_PATH)/githubapp auto kubernetes-sigs/kind INSTALL_PATH=$(INSTALL_PATH)
	@echo "Installed: $(kind)"
endif

.PHONY: .kind/start
.kind/start: ## Start a kind cluster
	@echo "Starting local kind cluster..."
	$(kind) create cluster \
		--name $(CLUSTER) \
		--image=kindest/node:v$(KUBE_VERSION)$(KIND_IMAGE_POSTFIX) \
		--config=$(DEPLOY_PATH)/kind/$(KIND_CONFIG) \
		-v $(KIND_VERBOSITY)
	$(kind) get kubeconfig --name $(CLUSTER) > $(KUBE_CONFIG)

.PHONY: cluster/start
cluster/start: cluster/stop .kind/start kube/context kube/deploy/calico metallb/deploy ## Create local cicd cluster

.PHONY: cluster/ingress
cluster/ingress: ## Start cluster ingress
	$(kubecmd) apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml
	$(kubecmd) apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/provider/baremetal/service-nodeport.yaml
	$(kubecmd) patch deployments -n ingress-nginx nginx-ingress-controller -p '{"spec":{"template":{"spec":{"containers":[{"name":"nginx-ingress-controller","ports":[{"containerPort":80,"hostPort":80},{"containerPort":443,"hostPort":443}]}],"nodeSelector":{"ingress-ready":"true"},"tolerations":[{"key":"node-role.kubernetes.io/master","operator":"Equal","effect":"NoSchedule"}]}}}}'

.PHONY: cluster/stop
cluster/stop: ## Delete local cicd cluster
	$(kind) delete cluster --name $(CLUSTER) || true

.PHONY: cluster/test
cluster/test: ## Validate the kubernetes deployment
	$(kubecmd) delete job kube-bench || true
	$(kubecmd) apply -f $(DEPLOY_PATH)/kind/cluster-test.yaml
	KUBECONFIG=$(KUBE_CONFIG) \
		$(stern) -l app=kube-bench --container kube-bench

#.PHONY: kind/ingressip
#kind/ingressip: ## Get an ingress IP to use
#	@echo `docker inspect --format '{{ .NetworkSettings.IPAddress }}' $$(docker ps -q) | cut -d"." -f1-3`".100"
