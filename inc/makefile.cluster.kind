ROOT_PATH ?= $(abspath $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST))))))
BIN_PATH ?= $(ROOT_PATH)/.local/bin
KIND_VERSION ?= 0.7.0

kind := $(BIN_PATH)/kind
KUBE_CLUSTER_CONTEXT := kind-$(KUBE_CLUSTER)

.PHONY: .deps/cluster.kind
.deps/cluster.kind: ## Get kind binary dependency
ifeq (,$(wildcard $(INSTALL_PATH)/kind))
	@$(MAKE) --no-print-directory -C $(APP_PATH)/githubapp auto kubernetes-sigs/kind INSTALL_PATH=$(INSTALL_PATH)
	@echo "Installed: $(kind)"
endif

.PHONY: .kind/start
.kind/start: ## Start a kind cluster
	@echo "Starting local kind cluster then waiting a minute for things to warm up..."
	$(kind) create cluster \
		--name $(KUBE_CLUSTER) \
		--image=kindest/node:v$(KUBE_VERSION) \
		--config=$(ROOT_PATH)/deploy/kind/deploy.yaml
		--wait 60s
	$(kind) get kubeconfig --name $(KUBE_CLUSTER) > $(KUBE_CONFIG)

.PHONY: cluster/start
cluster/start: .kind/start kube/context kube/deploy/metallb ## Create local cicd cluster

.PHONY: cluster/ingress
cluster/ingress: ## Start cluster ingress
	kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml
	kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/provider/baremetal/service-nodeport.yaml
	kubectl patch deployments -n ingress-nginx nginx-ingress-controller -p '{"spec":{"template":{"spec":{"containers":[{"name":"nginx-ingress-controller","ports":[{"containerPort":80,"hostPort":80},{"containerPort":443,"hostPort":443}]}],"nodeSelector":{"ingress-ready":"true"},"tolerations":[{"key":"node-role.kubernetes.io/master","operator":"Equal","effect":"NoSchedule"}]}}}}'

.PHONY: cluster/stop
cluster/stop: ## Delete local cicd cluster
	$(kind) delete cluster --name $(KUBE_CLUSTER)

.PHONY: cluster/test
cluster/test: ## Validate the kubernetes deployment
	$(kubecmd) delete job kube-bench || true
	$(kubecmd) apply -f $(DEPLOY_PATH)/kind/kind.bench.yaml
	KUBECONFIG=$(KUBE_CONFIG) \
		$(stern) -l app=kube-bench --container kube-bench

.PHONY: kind/ingressip
kind/ingressip: ## Get an ingress IP to use
	@echo `docker inspect --format '{{ .NetworkSettings.IPAddress }}' $$(docker ps -q) | cut -d"." -f1-3`".100"

#kind/localstorage: ## Install local kind storage
#	$(kubecmd) apply -f https://raw.githubusercontent.com/kudobuilder/operators/master/test/manifests/local-path-storage.yaml

#kind/ingress/start: ## Start proxy to ingress IPs
#	./scripts/cicd-ingress.sh

