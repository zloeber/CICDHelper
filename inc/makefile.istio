ROOT_PATH ?= $(abspath $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST))))))
BIN_PATH ?= $(ROOT_PATH)/.local/bin

yq ?= $(BIN_PATH)/yq
istioctl := $(BIN_PATH)/istioctl

.PHONY: .dep/istioctl
.dep/istioctl: ## Install istioctl locally
ifeq (,$(wildcard $(INSTALL_PATH)/istioctl))
	@$(MAKE) --no-print-directory -C $(APP_PATH)/githubapp auto istio/istio PACKAGE_EXE=istioctl INSTALL_PATH=$(INSTALL_PATH)
	@echo "Installed: $(istioctl)"
endif

.PHONY: .deps/istio
.deps/istio: .dep/istioctl ## Install dependencies

.PHONY: istio/verify
istio/verify: ## Verify istio install
	$(istioctl) verify-install \
	  --kubeconfig $(KUBE_CONFIG) \
	  --context $(KUBE_CLUSTER_CONTEXT)

.PHONY: istio/deploy
istio/deploy: istio/verify ## Deploy istio
	$(istioctl) operator init \
		--operatorNamespace=istio-operator \
		--istioNamespace=istio-system \
		-f=$(DEPLOY_PATH)/istio/profile.yaml \
		--wait \
		--kubeconfig $(KUBE_CONFIG) \
		--context $(KUBE_CLUSTER_CONTEXT)

.PHONY: istio/generate
istio/generate: ## Generate the istio operator manifest
	$(istioctl) manifest generate -f $(DEPLOY_PATH)/istio/profile.yaml

.PHONY: istio/remove
istio/remove: ## Remove istio
	tmpdir=$$(mktemp -d) && echo "$${tmpdir}" && \
	export STACK_INGRESS_INTERNALZONE=$(STACK_INGRESS_INTERNALZONE) && \
	$(gomplate) --file $(DEPLOY_PATH)/istio/profile.yaml --out "$${tmpdir}/profile.yaml" && \
	$(istioctl) manifest generate \
	  -f $${tmpdir}/profile.yaml | \
	  	$(kubecmd) delete -f -

.PHONY: istio/dashboard
istio/dashboard/%: ## Access istio dashboard
	$(istioctl) dashboard $(subst istio/dashboard/,,$@) \
	  --kubeconfig $(KUBE_CONFIG) \
	  --context $(KUBE_CLUSTER_CONTEXT)

.PHONY: istio/start/dnsforward
istio/start/dnsforward: dnsforward/stop dnsforward/start ## Forwards all dns requests to a local dns-proxy-server

.PHONY: istio/stop/dnsforward
istio/stop/dnsforward: dnsforward/stop ## Stop the dns forwarding container

.PHONY: istio/watch/ingress
istio/watch/ingress: ## Show istio ingress logs
	@$(stern) --all-namespaces -l istio=ingressgateway --tail 20 -t

istio/ingress/ip: ## Retrieve the ingress ip for istio
	@$(kubecmd) -n istio-system get svc istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
