ROOT_PATH ?= $(abspath $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST))))))
BIN_PATH ?= $(ROOT_PATH)/.local/bin
LENS_VERSION ?= 3.4.0
LENS_CLUSTER_STORE := $(ROOT_PATH)/.local/Lens/lens-cluster-store.json
lens := $(BIN_PATH)/lens


.PHONY: .dep/lens
.dep/lens: ## install lens
ifeq (,$(wildcard $(lens)))
	@mkdir -p $(BIN_PATH)
	@curl --retry 3 --retry-delay 5 --fail -sSL -o $(lens) https://github.com/lensapp/lens/releases/download/v$(LENS_VERSION)/Lens-$(LENS_VERSION).AppImage
	@chmod +x $(lens)
	$(lens) --appimage-portable-home
	@echo "Installed: $(lens)"
endif

.PHONY: .deps/lens
.deps/lens: .dep/lens ## Install dependencies

.PHONY: lens
lens: ## Launch lens
	$(lens)

.PHONY: lens/addcluster
lens/addcluster: lens/clearclusters ## Adds current kube cluster to lens
	@tmpconfig=`cat $(KUBE_CONFIG) | sed -e ':a' -e 'N' -e '$$!ba' -e 's/\n/\\n/g'`; \
	$(jq) --arg clusterconfig "$$tmpconfig" \
		--arg clustername $(CLUSTER) \
		'.clusters += [{id: $$clustername, kubeConfig: $$clusterconfig, preferences: {clusterName: $$clustername}, workspace: "default"}]' \
		<$(LENS_CLUSTER_STORE) >$(LENS_CLUSTER_STORE).tmp
	@cp $(LENS_CLUSTER_STORE).tmp $(LENS_CLUSTER_STORE)
	@echo "Added cluster configuration ($(KUBE_CONFIG)) to lens config: $(CLUSTER)"
	@echo "Start lens with either 'make lens' or '$(lens)'"

.PHONY: lens/clearclusters
lens/clearclusters: ## Remove all clusters from lens
	@$(jq) '. + {clusters: []}'	<$(LENS_CLUSTER_STORE) >$(LENS_CLUSTER_STORE).tmp
	@cp $(LENS_CLUSTER_STORE).tmp $(LENS_CLUSTER_STORE)

	