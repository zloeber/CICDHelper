ROOT_PATH ?= $(abspath $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST))))))
BIN_PATH ?= $(ROOT_PATH)/.local/bin

METALLB_VERSION ?= 0.9.3
CLUSTER_CONTEXT ?= $(CLUSTER)
#DOCKER_NETWORK ?= bridge
SUBNET_INDEX ?= 1
KUBE_CONFIG ?= $(ROOT_PATH)/.local/kube.$(CLUSTER).conf

kubectl := $(BIN_PATH)/kubectl
kustomize := $(BIN_PATH)/kustomize
kubecmd := KUBECONFIG=$(KUBE_CONFIG) $(kubectl)
stern := $(BIN_PATH)/stern

export KUBECONFIG=$(KUBE_CONFIG)

.PHONY: .dep/stern
.dep/stern: ## Install stern log watcher
ifeq (,$(wildcard $(stern)))
	@$(MAKE) --no-print-directory -C $(APP_PATH)/githubapp auto wercker/stern INSTALL_PATH=$(INSTALL_PATH)
	@echo "Installed: $(stern)"
endif

.PHONY: .dep/kubectl
.dep/kubectl: ## install kubectl for this project
ifeq (,$(wildcard $(kubectl)))
	@mkdir -p $(BIN_PATH)
	@curl --retry 3 --retry-delay 5 --fail -sSL -o $(kubectl) https://storage.googleapis.com/kubernetes-release/release/v$(KUBE_VERSION)/bin/$(HOST_PLATFORM)/$(ARCH)/kubectl
	@chmod +x $(kubectl)
	@echo "Installed: $(kubectl)"
endif

.PHONY: .deps/kube
.deps/kube: .dep/kubectl .dep/stern .dep/kustomize ## Install kube dependencies

.PHONY: kube/show/utilization
kube/show/utilization: ## Show aks node utilization
	$(kubecmd) get nodes --no-headers | awk '{print $$1}' | xargs -I {} sh -c 'echo {}; $(kubecmd) describe node {} | grep Allocated -A 5 | grep -ve Event -ve Allocated -ve percent -ve -- ; echo'

.PHONY: kube/reset/dns
kube/reset/dns: ## Deletes coredns pods to restart dns services on k8s cluster
	$(kubecmd) -n kube-system delete po -l k8s-app=kube-dns

kube/remove/pvc/finalizers/%: ## removes finalizers from a namespace persistent volume claims
	$(kubecmd) get pvc -n $(subst kube/remove/pvc/finalizers/,,$@) | tail -n+2 | awk '{print $$1}' | xargs -I{} $(kubecmd) -n $(subst kube/remove/pvc/finalizers/,,$@) patch pvc {} -p '{"metadata":{"finalizers": null}}'

kube/remove/pv/finalizers/%: ## removes finalizers from a namespace persistent volumes
	$(kubecmd) get pv -n $(subst kube/remove/pv/finalizers/,,$@) | tail -n+2 | awk '{print $$1}' | xargs -I{} $(kubecmd) patch pv {} -p '{"metadata":{"finalizers": null}}'

.PHONY: kube/context
kube/context: ## Set kubectl config context to CLUSTER
	$(kubecmd) config set-context $(CLUSTER_CONTEXT)
	$(kubecmd) config use-context $(CLUSTER_CONTEXT)

.PHONY: kube/create/dockersecret
kube/create/dockersecret: ## Create docker secret from current .docker/config.json
	$(kubecmd) create secret generic regcred \
	--from-file=.dockerconfigjson="$${HOME}/.docker/config.json" \
	--type=kubernetes.io/dockerconfigjson -n kube-system

#.PHONY: kube/proxy/dashboard
#kube/proxy/dashboard: ## Starts a proxy to the local cluster dashboard if it exists
#	PODNAME=$$($(kubecmd) get pods -n kube-system -l "app=kubernetes-dashboard,release=kubernetes-dashboard" -o jsonpath="{.items[0].metadata.name}"); \
#	$(kubecmd) -n kube-system port-forward $${PODNAME} 9090:9090

.PHONY: kube/deploy/calico
kube/deploy/calico: ## Deploys the Calico CNI
	@$(kubecmd) apply -f https://docs.projectcalico.org/manifests/calico.yaml

.PHONY: kube/config
kube/config: ## Exports a copy of the current kube config
	@cat $(KUBE_CONFIG)

.PHONY: kube/config/file
kube/config/file: ## Prints the current kube config file location
	@echo $(KUBE_CONFIG)

.PHONY: kube/list/resources
kube/list/resources: ## Prints kubernetes resources
	for kind in `$(kubecmd) api-resources | tail +2 | awk '{ print $$1 }' | sort`; do kubectl explain $$kind ; done | grep -e "KIND:" -e  "VERSION:" | awk '{print $$2}' | paste -sd' \n'

.PHONY: kube/bearertoken
kube/bearertoken: Return bearer token for cluster
	@echo $(shell $(kubecmd) get secrets -o jsonpath="{.items[?(@.metadata.annotations['kubernetes\.io/service-account\.name']=='default')].data.token}"|base64 --decode))

.PHONY: kube/loadbalancer/ip
kube/loadbalancer/ip: ## Show external loadbalancer ip
	@$(kubecmd) -n $(STACK_INGRESS_INTERNALNAMESPACE) get svc -o jsonpath='{.items[?(@.spec.type=="LoadBalancer")].status.loadBalancer.ingress[0].ip}'

.PHONY: kube/loadbalancer/subnet
kube/loadbalancer/subnet: ## Show docker bridge subnet
	@echo $(or $(STACK_INGRESS_INTERNALSUBNET), $(shell docker network inspect $(DOCKER_NETWORK) | $(jq) '.[0].IPAM.Config[0].Gateway' | sed -e 's/\0.1/$(SUBNET_INDEX).0\/24/g'))

.PHONY: dnsforward/start
dnsforward/start: dnsforward/stop ## Forwards all dns requests to a local dns-proxy-server
	@tmpdir=$$(mktemp -d) && \
	export STACK_INGRESS_INTERNALIP=$(shell $(MAKE) kube/loadbalancer/ip) && \
	export STACK_INGRESS_INTERNALDNSZONE=$(shell $(MAKE) .helmfile/lookups | grep -e "lookup_internalDNSZone: .*$$" | sed -e 's/^[ \t]*//' | cut -d" " -f2 ) && \
	echo "STACK_INGRESS_INTERNALIP=$${STACK_INGRESS_INTERNALIP}" && \
	echo "STACK_INGRESS_INTERNALDNSZONE=$${STACK_INGRESS_INTERNALDNSZONE}" && \
	$(gomplate) \
		--file $(DEPLOY_PATH)/dnsproxy/config.json \
		--out "$${tmpdir}/config.json" && \
	docker run --rm -d \
		--hostname $${STACK_INGRESS_INTERNALDNSZONE} \
		--name dns-proxy-server \
		-p 5380:5380 \
		-v $${tmpdir}:/app/conf \
		-v /var/run/docker.sock:/var/run/docker.sock \
		-v /etc/resolv.conf:/etc/resolv.conf \
		defreitas/dns-proxy-server
	@echo ""
	@echo "View dnsforwarding admin page at: http://localhost:5380"

.PHONY: dnsforward/stop
dnsforward/stop: ## Stop the dns forwarding container
	@docker stop dns-proxy-server || true
