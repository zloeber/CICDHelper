ROOT_PATH ?= $(abspath $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST))))))
HOME_PATH ?= $(ROOT_PATH)/.local
BIN_PATH ?= $(HOME_PATH)/bin

CHART_PATH ?= $(ROOT_PATH)/charts
HELMFILE_PATH ?= $(ROOT_PATH)/helmfiles
STACK ?= cluster.$(CLUSTER)
HELMFILE_VERSION ?= 0.109.0
HELM_VERSION ?= 3.2.0
HELM_FLAGS ?= 
## Use the following to show helm yaml rendered even if there are errors
#HELM_FLAGS ?= --args --debug
ENVIRONMENT ?= default
HELMFILE_VALUES ?= $(CONFIG_PATH)/$(ENVIRONMENT)/values.yaml

## This is to home helm configuration and plugins within the ./.local path.
export XDG_CACHE_HOME=$(HOME_PATH)
export XDG_CONFIG_HOME=$(HOME_PATH)
export XDG_DATA_HOME=$(HOME_PATH)

helmfile_binary ?= $(BIN_PATH)/helmfile
helmfile := $(helmfile_binary) --environment $(ENVIRONMENT)
helm_binary ?= $(BIN_PATH)/helm
helm := $(helm_binary)
gomplate := $(BIN_PATH)/gomplate
ct := $(BIN_PATH)/ct

.PHONY: .dep/helmfile
.dep/helmfile: ## Install helmfile
ifeq (,$(wildcard $(helmfile_binary)))
	@$(MAKE) --no-print-directory -C $(APP_PATH)/githubapp reset helmfile INSTALL_PATH=$(BIN_PATH)
	@$(MAKE) --no-print-directory -C $(APP_PATH)/githubapp auto roboll/helmfile INSTALL_PATH=$(BIN_PATH)
	@echo "Installed: $(helmfile_binary)"
endif

.PHONY: .dep/ct
.dep/ct: ## Install ct locally
ifeq (,$(wildcard $(ct)))
	@$(MAKE) --no-print-directory -C $(APP_PATH)/githubapp auto helm/chart-testing PACKAGE_EXE=ct INSTALL_PATH=$(BIN_PATH)
	@echo "Installed: $(ct)"
endif

.PHONY: .dep/gomplate
.dep/gomplate: ## Install gomplate locally
ifeq (,$(wildcard $(BIN_PATH)/gomplate))
	@$(MAKE) --no-print-directory -C $(APP_PATH)/githubapp auto hairyhenderson/gomplate INSTALL_PATH=$(BIN_PATH)
	@echo "Installed: $(gomplate)"
endif

.PHONY: .dep/helm
.dep/helm: ## Install helm locally
ifeq (,$(wildcard $(helm_binary)))
	mkdir -p /tmp/helm3
	curl --retry 3 --retry-delay 5 --fail -sSL -o - https://get.helm.sh/helm-v$(HELM_VERSION)-$(HOST_PLATFORM)-$(ARCH).tar.gz | tar -C /tmp/helm3 -xz $(HOST_PLATFORM)-$(ARCH)/helm
	mv /tmp/helm3/$(HOST_PLATFORM)-$(ARCH)/helm $(helm_binary)
	rm -rf /tmp/helm3
	chmod +x $(helm_binary)
	echo "Installed: $(helm_binary)"
endif

.PHONY: .helm/plugins
.helm/plugins: ## Installs helm plugins
	@$(helm) plugin install https://github.com/databus23/helm-diff --version master 2> /dev/null || true
	@$(helm) plugin install https://github.com/futuresimple/helm-secrets 2> /dev/null || true
	@$(helm) plugin install https://github.com/aslafy-z/helm-git.git 2> /dev/null || true

.PHONY: .deps/helm
.deps/helm: .dep/helm .dep/helmfile .helm/plugins ## Install yq, helm, helmfile, and plugins locally

.PHONY: .helmfile/stacks
.helmfile/stacks: ## Lists all available helmfile stacks
	@ls $(HELMFILE_PATH)/helmfile.*.yaml | xargs -n1 basename | sed -e 's/\.yaml//g' -e 's/helmfile\.//g'

.PHONY: stacks
stacks: .helmfile/stacks ## Lists all available helmfile stacks

.PHONY: .helmfile/apply
.helmfile/apply: ## Apply all resources only when there are changes
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml apply

.PHONY: apply
apply: .helmfile/apply ## Apply all resources only when there are changes

.PHONY: .helmfile/sync
.helmfile/sync: ## Sync STACK with cluster
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml sync

.PHONY: sync
sync: .helmfile/sync ## Sync STACK with cluster

.PHONY: .helmfile/deploy
.helmfile/deploy: ## Deploy STACK with cluster without syncing repos first
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml sync --skip-deps

.PHONY: deploy
deploy: .helmfile/deploy ## Deploy STACK with cluster without syncing repos first

.PHONY: .helmfile/repos
.helmfile/repos: ## Helm repo add and update
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml repos

.PHONY: repos
repos: .helmfile/repos ## Helm repo sync only

.PHONY: .helmfile/list
.helmfile/list: ## List releases in helmfile environment
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml list

.PHONY: list
list: .helmfile/list ## List releases in helmfile environment

.PHONY: .helmfile/diff
.helmfile/diff: ## diffs STACK with cluster
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml diff

.PHONY: diff
diff: .helmfile/diff ## diffs STACK with cluster

.PHONY: .helmfile/test
.helmfile/test: ## Tests STACK on cluster
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml test

.PHONY: test
test: .helmfile/test ## Tests STACK on cluster

.PHONY: .helmfile/destroy
.helmfile/destroy: .prompt/yesno ## Removes STACK from cluster
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml destroy

.PHONY: destroy
destroy: .helmfile/destroy ## Removes STACK from cluster

.PHONY: .helmfile/build
.helmfile/build: ## Builds helmfile YAML only
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml build

.PHONY: build
build: .helmfile/build ## Builds helmfile YAML only

.PHONY: .helmfile/lookups
.helmfile/lookups: ## Builds helmfile YAML for looking ups
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/lookup.placeholder.yaml build

.PHONY: .helmfile/lookup/%
.helmfile/lookup/%: ## lookup % value in constructed chart values
	@$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/lookup.placeholder.yaml build | grep -e "$(subst .helmfile/lookup/,,$@): .*$$" | sed -e 's/^[ \t]*//' | cut -d" " -f2

.PHONY: .helmfile/template
.helmfile/template: ## template STACK yaml manifest for cluster
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml template $(HELM_ARGS)

.PHONY: template
template: .helmfile/template ## template STACK yaml manifest for cluster

.PHONY: .helmfile/reload
.helmfile/reload: .helmfile/destroy .helmfile/sync ## Removes then adds STACK from cluster

.PHONY: reload
reload: .helmfile/reload ## Removes then adds STACK from cluster

.PHONY: .helmfile/scorch
.helmfile/scorch: .helmfile/destroy ## (WARNING!) Removes stack then its namespace if possible
	$(kubecmd) delete namespace $(STACK) || true

.PHONY: scorch
scorch: .helmfile/scorch ## (WARNING!) Removes stack then its namespace if possible

.PHONY: show/helm
show/helm: ## Show helm settings
	@echo "export XDG_CACHE_HOME=$(XDG_CACHE_HOME)"
	@echo "export XDG_CONFIG_HOME=$(XDG_CONFIG_HOME)"
	@echo "export XDG_DATA_HOME=$(XDG_DATA_HOME)"
	@echo "alias hlm=$(helm_binary)"
