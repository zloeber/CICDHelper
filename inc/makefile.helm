ROOT_PATH ?= $(abspath $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST))))))
BIN_PATH ?= $(ROOT_PATH)/.local/bin

CHART_PATH ?= $(ROOT_PATH)/charts
HELMFILE_PATH ?= $(ROOT_PATH)/helmfiles
STACK ?= cluster.$(PROFILE)
HELMFILE_VERSION ?= 0.109.0
HELM_VERSION ?= 3.2.0
ENVIRONMENT ?= default

export XDG_CACHE_HOME=$(ROOT_PATH)/.local
export XDG_CONFIG_HOME=$(ROOT_PATH)/.local
export XDG_DATA_HOME=$(ROOT_PATH)/.local

helmfile_binary ?= $(BIN_PATH)/helmfile
helmfile := $(helmfile_binary) --environment $(ENVIRONMENT)
helm_binary ?= $(BIN_PATH)/helm
helm := $(helm_binary)
gomplate := $(BIN_PATH)/gomplate
yq := $(BIN_PATH)/yq
ct := $(BIN_PATH)/ct

ifneq (,$(wildcard $(yq)))
STACK_INGRESS_INTERNALZONE := $(shell $(yq) r $(CONFIG_PATH)/environment.$(ENVIRONMENT).yaml stacks.ingress.zoneInternal)
STACK_INGRESS_INTERNALNAMESPACE := $(shell $(yq) r $(CONFIG_PATH)/environment.$(ENVIRONMENT).yaml stacks.ingress.namespaceInternal)
endif

.PHONY: .dep/helmfile
.dep/helmfile: ## Install helmfile
ifeq (,$(wildcard $(helmfile_binary)))
	@$(MAKE) --no-print-directory -C $(APP_PATH)/githubapp reset helmfile INSTALL_PATH=$(INSTALL_PATH)
	@$(MAKE) --no-print-directory -C $(APP_PATH)/githubapp auto roboll/helmfile INSTALL_PATH=$(INSTALL_PATH)
	@echo "Installed: $(helmfile_binary)"
endif

.PHONY: .dep/ct
.dep/ct: ## Install ct locally
ifeq (,$(wildcard $(ct)))
	@$(MAKE) --no-print-directory -C $(APP_PATH)/githubapp auto helm/chart-testing PACKAGE_EXE=ct INSTALL_PATH=$(INSTALL_PATH)
	@echo "Installed: $(ct)"
endif

.PHONY: .dep/gomplate
.dep/gomplate: ## Install gomplate locally
ifeq (,$(wildcard $(BIN_PATH)/gomplate))
	@$(MAKE) --no-print-directory -C $(APP_PATH)/githubapp auto hairyhenderson/gomplate INSTALL_PATH=$(INSTALL_PATH)
	@echo "Installed: $(gomplate)"
endif

.PHONY: .dep/helm
.dep/helm: ## Install helm locally
ifeq (,$(wildcard $(helm_binary)))
	mkdir -p /tmp/helm3
	curl --retry 3 --retry-delay 5 --fail -sSL -o - https://get.helm.sh/helm-v$(HELM_VERSION)-$(HOST_PLATFORM)-$(ARCH).tar.gz | tar -C /tmp/helm3 -xz $(HOST_PLATFORM)-$(ARCH)/helm
	mv /tmp/helm3/$(HOST_PLATFORM)-$(ARCH)/helm $(helm_binary)
	rm -rf /tmp/helm3
	chmod +x $(helm_binary)
	echo "Installed: $(helm_binary)"
endif

.PHONY: .helm/plugins
.helm/plugins: ## Installs helm plugins
	@$(helm) plugin install https://github.com/databus23/helm-diff --version master 2> /dev/null || true
	@$(helm) plugin install https://github.com/futuresimple/helm-secrets 2> /dev/null || true
#	@$(helm) plugin install https://github.com/mumoshu/helm-x 2> /dev/null || true
	@$(helm) plugin install https://github.com/aslafy-z/helm-git.git 2> /dev/null || true
#	@$(helm) plugin install https://github.com/thomastaylor312/helm-namespace 2> /dev/null || true


.PHONY: .deps/helm
.deps/helm: .dep/helm .dep/ct .dep/helmfile .helm/plugins ## Install yq, ct, helm, helmfile, and plugins locally

.PHONY: helmfile/list
helmfile/list: ## Lists all available helmfiles
	@ls $(HELMFILE_PATH)/helmfile.*.yaml | xargs -n1 basename | sed -e 's/\.yaml//g' -e 's/helmfile\.//g'

.PHONY: helmfile/apply
helmfile/apply: ## apply all resources from state file only when there are changes
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml apply

.PHONY: helmfile/sync
helmfile/sync: ## Sync STACK with cluster
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml sync

.PHONY: helmfile/diff
helmfile/diff: ## diffs STACK with cluster
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml diff

.PHONY: helmfile/test
helmfile/test: ## Tests STACK on cluster
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml test

.PHONY: helmfile/destroy
helmfile/destroy: prompt/yesno ## Removes STACK from cluster
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml destroy

.PHONY: helmfile/template
helmfile/template: ## template STACK yaml manifest for cluster
	$(helmfile) -b $(helm_binary) -f $(HELMFILE_PATH)/helmfile.$(STACK).yaml template

.PHONY: helmfile/remove
helmfile/remove: helmfile/destroy ## Removes STACK from cluster (alias for destroy)

.PHONY: helmfile/reload
helmfile/reload: helmfile/destroy helmfile/sync ## Removes then adds STACK from cluster

.PHONY: helmfile/scorch
helmfile/scorch: helmfile/destroy ## (WARNING!) Removes stack then its namespace if possible
	$(kubecmd) delete namespace $(STACK)

.PHONY: show/helm
show/helm: ## Show helm settings
	@echo "export XDG_CACHE_HOME=$(XDG_CACHE_HOME)"
	@echo "export XDG_CONFIG_HOME=$(XDG_CONFIG_HOME)"
	@echo "export XDG_DATA_HOME=$(XDG_DATA_HOME)"
	@echo "alias hlm=$(helm_binary)"
