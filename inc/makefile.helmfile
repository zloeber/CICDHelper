## Environment deployment
helmfile/list: ## Lists all available stacks
	@ls ${HELMFILE_PATH}/helmfile.*.yaml | cut -d'.' -f 2

helmfile/apply: show/env ## apply all resources from state file only when there are changes
	$(helmfile) -b $(helm) -f ${HELMFILE_PATH}/helmfile.${STACK}.yaml $(HELMFILE_TARGET) apply

helmfile/sync: context ## Sync STACK with TARGET infrastructure stack
	$(helmfile) -b $(helm) -f ${HELMFILE_PATH}/helmfile.${STACK}.yaml $(HELMFILE_TARGET) sync

helmfile/diff: show/env ## diffs STACK to TARGET infrastructure
	$(helmfile) -b $(helm) -f ${HELMFILE_PATH}/helmfile.${STACK}.yaml diff

helmfile/test: show/env ## Tests STACK in TARGET
	$(helmfile) -b $(helm) -f ${HELMFILE_PATH}/helmfile.${STACK}.yaml test

helmfile/destroy: prompt/yesno ## Removes STACK from TARGET cluster
	$(helmfile) -b $(helm) -f ${HELMFILE_PATH}/helmfile.${STACK}.yaml $(HELMFILE_TARGET) destroy

helmfile/template: ## template STACK yaml manifest for TARGET cluster
	$(helmfile) -b $(helm) -f ${HELMFILE_PATH}/helmfile.${STACK}.yaml $(HELMFILE_TARGET) template

helmfile/remove: helmfile/destroy ## Removes STACK from TARGET cluster (alias for destroy)

helmfile/reload: show/env helmfile/destroy helmfile/sync ## Removes then adds STACK from TARGET cluster

helmfile/scorch: show/env helmfile/destroy ## (WARNING!) Removes stack then its namespace if possible
	$(kubectl) delete namespace ${STACK}

sync: helmfile/sync ## Alias for helmfile/sync 
remove: helmfile/remove ## Alias for helmfile/sync
