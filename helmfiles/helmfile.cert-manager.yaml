---
bases:
- ../config/environments.yaml
- ../config/helmdefaults.yaml
---

repositories:
- name: jetstack
  url: https://charts.jetstack.io
- name: incubator
  url: https://kubernetes-charts-incubator.storage.googleapis.com

releases:
###############################################################################
## CERT-MANAGER - Automatic Let's Encrypt for Ingress  ########################
##   Also provides local CA for issuing locally valid TLS certificates  #######
###############################################################################
# References:
# - https://github.com/jetstack/cert-manager/blob/v0.11.0/deploy/charts/cert-manager/values.yaml
# Instructions for installing and testing correct install are at
# - https://docs.cert-manager.io/en/release-0.9/getting-started/install/kubernetes.html
- name: namespace-cert-manager
  chart: {{ .Values.archetypeChart }}
  namespace: kube-system
  labels:
    chart: namespace-cert-manager
    component: cert-manager
    namespace: {{ .Values.stacks.certmanager.namespace | default "cert-manager" }}
  wait: true
  installed: true
  values:
  - app: cert-manager
    namespace:
      enabled: true
      name: {{ .Values.stacks.certmanager.namespace | default "cert-manager" }}
      annotations:
        helm.sh/resource-policy: "keep"
        certmanager.k8s.io/disable-validation: "true"

- name: cert-manager
  namespace: {{ .Values.stacks.certmanager.namespace | default "cert-manager" }}
  labels:
    chart: cert-manager
    repo: stable
    component: "cert-manager"
    namespace: {{ .Values.stacks.certmanager.namespace | default "cert-manager" }}
    vendor: "jetstack"
  chart: jetstack/cert-manager
  # version: "v0.15.0"
  wait: true
  installed: true
  needs:
    - kube-system/namespace-cert-manager
  # hooks:
  #   - events: ["presync"]
  #     showlogs: true
  #     command: "/bin/sh"
  #     args: ["-c", "kubectl apply -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.9/deploy/manifests/00-crds.yaml"]
  values:
    - installCRDs: true
      fullnameOverride: cert-manager
      rbac:
        create: true
      ingressShim:
        defaultIssuerName: default
        defaultIssuerKind: Issuer
      serviceAccount:
        create: true
        name: '{{ .Values.stacks.certmanager.serviceaccountname | default "" }}'
      prometheus:
        enabled: {{ .Values.stacks.monitoring.installed | default "false" }}
        servicemonitor:
          enabled: false
      webhook:
        enabled: true
      cainjector:
        enabled: true
      resources:
        limits:
          cpu: "200m"
          memory: "256Mi"
        requests:
          cpu: "50m"
          memory: "128Mi"

{{- if .Values.stacks.monitoring.installed }}
- name: cert-manager-metricsservice
  chart: incubator/raw
  namespace: {{ .Values.stacks.certmanager.namespace | default "cert-manager" }}
  labels:
    component: "cert-manager-metricsservice"
    namespace: {{ .Values.stacks.certmanager.namespace | default "cert-manager" }}
    default: "true"
  installed: {{ .Values.stacks.monitoring.installed | default "true" }}
  needs:
    - kube-system/namespace-cert-manager
  values:
  - resources:
    - apiVersion: v1
      kind: Service
      metadata:
        name: cert-manager
        labels:
          app: cert-manager
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
      spec:
        type: ClusterIP
        ports:
          - protocol: TCP
            port: 9402
            targetPort: 9402
        selector:
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/instance: cert-manager

- name: cert-manager-servicemonitor
  chart: incubator/raw
  namespace: {{ .Values.stacks.monitoring.namespace | default "monitoring" }}
  labels:
    component: cert-manager
    namespace: {{ .Values.stacks.monitoring.namespace | default "monitoring" }}
  installed: {{ .Values.stacks.monitoring.installed | default "false" }}
  values:
  - resources:
    - apiVersion: monitoring.coreos.com/v1
      kind: ServiceMonitor
      metadata:
        name: cert-manager
        namespace: {{ .Values.stacks.monitoring.namespace | default "monitoring" }}
        labels:
          app: cert-manager
          chart: cert-manager-v0.9.0
          release: cert-manager
          heritage: Helm
          prometheus: {{ .Values.stacks.monitoring.prometheusInstance | default "kube-prometheus" }}
      spec:
        jobLabel: cert-manager
        namespaceSelector:
          matchNames:
          - {{ .Values.stacks.certmanager.namespace | default "cert-manager" }}
        selector:
          matchLabels:
            app: cert-manager
            release: cert-manager
        endpoints:
        - targetPort: 9402
          path: /metrics
          interval: 60s
          scrapeTimeout: 30s
{{- end }}

- name: cert-manager-issuers
  chart: incubator/raw
  namespace: {{ .Values.stacks.certmanager.namespace | default "cert-manager" }}
  labels:
    component: "cert-manager"
    namespace: {{ .Values.stacks.certmanager.namespace | default "cert-manager" }}
    default: "true"
  installed: true
  wait: false
  needs:
    - cert-manager/cert-manager
    - kube-system/namespace-cert-manager
  values:
  - resources:
    - apiVersion: cert-manager.io/v1alpha2
      kind: ClusterIssuer
      metadata:
        name: {{ .Values.stacks.certmanager.issuerStaging | default "letsencrypt-staging" }}
      spec:
        acme:
          server: https://acme-staging-v02.api.letsencrypt.org/directory
          email: {{ .Values.stacks.certmanager.email | default "some.user@yourdomain.com" }}
          privateKeySecretRef:
            name: {{ .Values.stacks.certmanager.issuerStaging | default "letsencrypt-staging" }}
          solvers:
            - http01:
                ingress:
                  class: {{ .Values.stacks.ingress.classStage | default "stage" }}
    - apiVersion: cert-manager.io/v1alpha2
      kind: ClusterIssuer
      metadata:
        name: {{ .Values.stacks.certmanager.issuerProduction | default "letsencrypt-prod" }}
      spec:
        acme:
          server: https://acme-v02.api.letsencrypt.org/directory
          email: {{ .Values.stacks.certmanager.email | default "someuser@somedomain.com" }}
          privateKeySecretRef:
            name: letsencrypt-prod
          solvers:
            - http01:
                ingress:
                  class: {{ .Values.stacks.ingress.classExternal | default "external" }}
    - apiVersion: cert-manager.io/v1alpha2
      kind: ClusterIssuer
      metadata:
        name: {{ .Values.stacks.certmanager.issuerDefault | default "default" }}
      spec:
        selfSigned: {}
