## Install Hashicorp argocd with Consul backend
---
bases:
- ../config/environments.yaml
- ../config/helmdefaults.yaml
---

repositories:
- name: argocd
  url: "git+https://github.com/argoproj/argo-helm@/charts/argo-cd"
- name: incubator
  url: https://kubernetes-charts-incubator.storage.googleapis.com


###############
## Hashicorp argocd
releases:
- name: namespace-argocd
  chart: {{ .Values.archetypeChart }}
  namespace: kube-system
  labels:
    chart: namespace-argocd
    component: argocd
    namespace: kube-system
  wait: true
  installed: true
  values:
  - app: argocd
    namespace:
      enabled: true
      name: argocd

## argocd Deployment
# Values: https://github.com/argoproj/argo-helm/blob/master/charts/argo-cd/values.yaml
- name: argo-cd
  namespace: argocd
  installed: true
  chart: argocd/argo-cd
  labels:
    chart: argocd
    component: argocd
    namespace: argocd
  needs:
    - kube-system/namespace-argocd
  values:
  - server:
      # Setup server as insecure so that we can use traefik to expose ingress
      # https://argoproj.github.io/argo-cd/operator-manual/ingress/
      extraArgs:
      - --insecure
      # Additional configmap entry for helmfile custom plugin
      # https://github.com/travisghansen/argo-cd-helmfile
      config:
        # Argo CD's externally facing base URL (optional). Required when configuring SSO
        url: https://argocd.{{ .Values.stacks.ingress.zoneInternal }}
        application.instanceLabelKey: argocd.argoproj.io/instance
        configManagementPlugins: |
          - name: helmfile
            init:
              command: ["argo-cd-helmfile.sh"]
              args: ["init"]
            generate:
              command: ["argo-cd-helmfile.sh"]
              args: ["generate"]
    repoServer:
      volumes:
      - name: custom-tools
        emptyDir: {}
      initContainers:
      - name: download-tools
        image: alpine:3.8
        command: [sh, -c]
        args:
          - wget -qO /custom-tools/argo-cd-helmfile.sh https://raw.githubusercontent.com/travisghansen/argo-cd-helmfile/master/src/argo-cd-helmfile.sh &&
            chmod +x /custom-tools/argo-cd-helmfile.sh &&
            wget -qO /custom-tools/helmfile https://github.com/roboll/helmfile/releases/download/v0.116.0/helmfile_linux_amd64 &&
            chmod +x /custom-tools/helmfile
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools
      volumeMounts:
      - mountPath: /usr/local/bin/argo-cd-helmfile.sh
        name: custom-tools
        subPath: argo-cd-helmfile.sh
      - mountPath: /usr/local/bin/helmfile
        name: custom-tools
        subPath: helmfile

# - name: ingress-argocd
#   namespace: "argocd"
#   chart: {{ .Values.archetypeChart }}
#   installed: true
#   needs:
#   - kube-system/namespace-argocd
#   - argocd/argo-cd
#   labels:
#     chart: ingress-argocd
#     component: ingress
#     namespace: argocd
#   values:
#   - zone: internal
#     app: argocd-dashboard
#     ingressClassMap:
#       internal: {{ .Values.stacks.ingress.classInternal }}
#     ingress:
#       enabled: true
#       tlsEnabled: true
#       hosts:
#       - name: argocd.{{ .Values.stacks.ingress.zoneInternal }}
#         secretName: ingress-argocd-dashboard
#         config:
#           http:
#             paths:
#             - path: "/"
#               backend:
#                 serviceName: argo-cd-argocd-server
#                 servicePort: 80

- name: ingress-argocd
  namespace: argocd
  chart: incubator/raw
  installed: true
  needs:
  - kube-system/namespace-argocd
  - argocd/argo-cd
  labels:
    chart: ingress-argocd
    component: ingress
    namespace: argocd
  values:
  - resources:
    - apiVersion: traefik.containo.us/v1alpha1
      kind: IngressRoute
      metadata:
        name: argocd-server-ingress
      spec:
        entryPoints:
          - websecure
        routes:
          - match: Host(`argocd.{{ .Values.stacks.ingress.zoneInternal }}`)
            kind: Rule
            services:
              - name: argo-cd-argocd-server
                port: 80
        tls:
          certResolver: default
          options: {}
