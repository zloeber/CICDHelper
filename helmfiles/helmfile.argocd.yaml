helmDefaults:
  tillerless: true
  tillerNamespace: platform
  atomic: true
  verify: false
  wait: true
  timeout: 900
  recreatePods: true
  force: false

repositories:
- name: argocd
  url: "git+https://github.com/argoproj/argo-helm@charts/argo-cd/"

###############
## ArgoCD
releases:
{{- if eq (env "HELM_VERSION" | default "2") "3" }}
- name: namespace-argocd
  # Helm 3 needs to put deployment info into a namespace. As this creates a namespace it will not exist yet so we use 'kube-system' 
  #  which should exist in all clusters.
  chart: ../charts/namespace/chart/namespace
  namespace: kube-system
  labels:
    chart: namespace-argocd
    component: "argocd"
    namespace: "{{ env "STACK_ARGOCD_NAMESPACE" | default "argocd" }}"
  wait: true
  installed: true
  values:
  - namespaces:
    - {{ env "STACK_ARGOCD_NAMESPACE" | default "argocd" }}
{{- end }}

- name: argocd
  namespace: {{ env "STACK_ARGOCD_NAMESPACE" | default "argocd" }}
  installed: {{ env "STACK_ARGOCD" | default "true" }}
  chart: argocd/argo-cd
  labels:
    chart: argocd
    component: argocd
    namespace: {{ env "STACK_ARGOCD_NAMESPACE" | default "argocd" }}
{{- if eq (env "HELM_VERSION" | default "2") "3" }}
  needs:
    - kube-system/namespace-argocd
{{- end }}
  values:
  - controller:
      metrics.enabled: true
      metrics.serviceMonitor.enabled: true
    repoServer:
      metrics.enabled: true
      metrics.serviceMonitor.enabled: true
    server:
      extraArgs:
        insecure: true
      metrics.enabled: true
      metrics.service.annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: 8082
      metrics.serviceMonitor.enabled: true
      # certificate:
      #   enabled: true
      #   issuer: cert-manager/letsencrypt-staging
      #   domain: argocd.{{ .Environment.Values.overrides.fqdn | default "micro.svc" }}
{{- if env "AKS_RESERVED_NODESELECTOR" | default "" }}
      controller.nodeSelector:
        agentpool: {{ env "AKS_RESERVED_NODESELECTOR" | default "agentpool" }}
      server.nodeSelector:
        agentpool: {{ env "AKS_RESERVED_NODESELECTOR" | default "agentpool" }}
      repoServer.nodeSelector:
        agentpool: {{ env "AKS_RESERVED_NODESELECTOR" | default "agentpool" }}
      redis.nodeSelector:
        agentpool: {{ env "AKS_RESERVED_NODESELECTOR" | default "agentpool" }}
      dex.nodeSelector:
        agentpool: {{ env "AKS_RESERVED_NODESELECTOR" | default "agentpool" }}
{{- end }}

- name: ingress-argocd
  chart: incubator/raw
  namespace: {{ env "STACK_ARGOCD_NAMESPACE" | default "argocd" }}
  installed: {{ env "STACK_ARGOCD" | default "true" }}
{{- if eq (env "HELM_VERSION" | default "2") "3" }}
  needs:
    - kube-system/namespace-argocd
{{- end }}  
  labels:
    chart: ingress-argocd
    component: ingress
    namespace: argocd
  values:
  - resources:
    - apiVersion: traefik.containo.us/v1alpha1
      kind: IngressRoute
      metadata:
        name: argocd-server-ingress
      spec:
        entryPoints:
          - websecure
        routes:
          - match: Host(`argocd.{{ .Environment.Values.overrides.fqdn | default "micro.svc" }}`)
            kind: Rule
            services:
              - name: argocd-server
                port: 80
        tls:
          certResolver: default
          options: {}
# - name: ingress-argocd
#   namespace: {{ env "STACK_ARGOCD_NAMESPACE" | default "argocd" }}
#   chart: "../charts/archtype"
#   installed: {{ env "STACK_ARGOCD" | default "true" }}
#   labels:
#     chart: "ingress-argocd"
#     component: "ingress"
#     namespace: "{{ env "STACK_ARGOCD_NAMESPACE" | default "argocd" }}"
# {{- if eq (env "HELM_VERSION" | default "2") "3" }}
#   needs:
#     - kube-system/namespace-argocd
# {{- end }}
#   values:
#   - project:
#       team: {{ env "TEAM" | default "team1" }}
#       stage: {{ env "STAGE" | default "dev" }}
#       target: {{ env "TARGET" | default "cicd" }}
#       client: {{ env "CLIENT" | default "client1" }}
#     ingressInternalClass: {{ env "STACK_INGRESS_INT_CLASS" | default "internal" }}
#     ingress:
#       enabled: true
#       internal: false
#       annotations:
#         kubernetes.io/ingress.class: {{ env "STACK_INGRESS_INT_CLASS" | default "internal" }}
#         nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
#         nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
#       hosts:
#       - name: argocd.{{ .Environment.Values.overrides.fqdn | default "micro.svc" }}
#         secretName: argocd-secret
#         config:
#           http:
#             paths:
#             - path: "/"
#               backend:
#                 serviceName: argocd-server
#                 servicePort: http

# - name: ingress-argocd-grpck
#   namespace: {{ env "STACK_ARGOCD_NAMESPACE" | default "argocd" }}
#   chart: "../charts/archtype"
#   installed: {{ env "STACK_ARGOCD" | default "true" }}
#   labels:
#     chart: "ingress-argocd"
#     component: "ingress"
#     namespace: "{{ env "STACK_ARGOCD_NAMESPACE" | default "argocd" }}"
# {{- if eq (env "HELM_VERSION" | default "2") "3" }}
#   needs:
#     - kube-system/namespace-argocd
# {{- end }}
#   values:
#   - project:
#       team: {{ env "TEAM" | default "team1" }}
#       stage: {{ env "STAGE" | default "dev" }}
#       target: {{ env "TARGET" | default "cicd" }}
#       client: {{ env "CLIENT" | default "client1" }}
#     ingressInternalClass: {{ env "STACK_INGRESS_INT_CLASS" | default "internal" }}
#     ingress:
#       enabled: true
#       internal: false
#       annotations:
#         kubernetes.io/ingress.class: {{ env "STACK_INGRESS_INT_CLASS" | default "internal" }}
#         nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
#       hosts:
#       - name: argocd-grpc.{{ .Environment.Values.overrides.fqdn | default "micro.svc" }}
#         secretName: argocd-secret
#         config:
#           http:
#             paths:
#             - path: "/"
#               backend:
#                 serviceName: argocd-server
#                 servicePort: https

# - name: ingress-argocd
#   chart: incubator/raw
#   namespace: {{ env "STACK_ARGOCD_NAMESPACE" | default "argocd" }}
#   installed: {{ env "STACK_ARGOCD" | default "true" }}
# {{- if eq (env "HELM_VERSION" | default "2") "3" }}
#   needs:
#     - kube-system/namespace-argocd
# {{- end }}  
#   labels:
#     chart: ingress-argocd
#     component: ingress
#     namespace: argocd
#   values:
#   - resources:
#     - apiVersion: traefik.containo.us/v1alpha1
#       kind: IngressRoute
#       metadata:
#         name: ingress-argocd-server
#       spec:
#         entryPoints:
#           - websecure
#         routes:
#           - match: Host(`argocd.{{ .Environment.Values.overrides.fqdn | default "micro.svc" }}`)
#             kind: Rule
#             services:
#               - name: argocd-server
#                 port: 80
#         tls:
#           certResolver: default
#           options: {}
