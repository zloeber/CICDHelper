---
bases:
- ../config/environments.yaml
- ../config/helmdefaults.yaml
- ../config/repositories.yaml
---

releases:
- name: argocd-namespace
  chart: {{ .Values | getOrNil "archetype.chart" | default "zloeber/archetype" }}
  version: {{ .Values | getOrNil "archetype.version" | default "0.0.2" }}
  namespace: kube-system
  condition: argocd.enabled
  installed: true
  wait: true
  labels:
    chart: argocd-namespace
    component: argocd
    namespace: kube-system
  values:
  - app: argocd
    namespace:
      enabled: true
      name: {{ .Values | getOrNil "argocd.namespace" | default "argo-cd" }}

## argocd Deployment
# Values: https://github.com/argoproj/argo-helm/blob/master/charts/argo-cd/values.yaml
- name: argocd
  chart: {{ .Values | getOrNil "argocd.chart" | default "argocd/argo-cd" }}
  namespace: {{ .Values | getOrNil "argocd.namespace" | default "argo-cd" }}
  version: {{ .Values | getOrNil "argocd.version" | default "2.3.5" }}
  condition: argocd.enabled
  installed: true
  missingFileHandler: Debug
  labels:
    chart: argocd
    component: argocd
    namespace: {{ .Values | getOrNil "argocd.namespace" | default "argo-cd" }}
  needs:
    - kube-system/argocd-namespace
  values:
  - server:
      # Setup server as insecure so that we can use traefik to expose ingress
      # https://argoproj.github.io/argo-cd/operator-manual/ingress/
      extraArgs:
      - --insecure
      # Additional configmap entry for helmfile custom plugin
      # https://github.com/travisghansen/argo-cd-helmfile
      config:
        # Argo CD's externally facing base URL (optional). Required when configuring SSO
        url: https://argocd.{{ .Values | getOrNil "ingress.internal.zone" | default "int" }}.{{ .Values | getOrNil "dnsRoot" | default "micro.svc" }}
        application.instanceLabelKey: argocd.argoproj.io/instance
        configManagementPlugins: |
          - name: helmfile
            init:
              command: ["argo-cd-helmfile.sh"]
              args: ["init"]
            generate:
              command: ["argo-cd-helmfile.sh"]
              args: ["generate"]
    repoServer:
      volumes:
      - name: custom-tools
        emptyDir: {}
      initContainers:
      - name: download-tools
        image: alpine:3.8
        command: [sh, -c]
        args:
          - wget -qO /custom-tools/argo-cd-helmfile.sh https://raw.githubusercontent.com/travisghansen/argo-cd-helmfile/master/src/argo-cd-helmfile.sh &&
            chmod +x /custom-tools/argo-cd-helmfile.sh &&
            wget -qO /custom-tools/helmfile https://github.com/roboll/helmfile/releases/download/v0.116.0/helmfile_linux_amd64 &&
            chmod +x /custom-tools/helmfile
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools
      volumeMounts:
      - mountPath: /usr/local/bin/argo-cd-helmfile.sh
        name: custom-tools
        subPath: argo-cd-helmfile.sh
      - mountPath: /usr/local/bin/helmfile
        name: custom-tools
        subPath: helmfile
  - "../config/{{ .Environment.Name }}/argocd.override.yaml"

- name: argocd-ingress
  namespace: {{ .Values | getOrNil "argocd.namespace" | default "argocd" }}
  chart: {{ .Values | getOrNil "archetype.chart" | default "zloeber/archetype" }}
  version: {{ .Values | getOrNil "archetype.version" | default "0.0.2" }}
  condition: ingress.enabled
  installed: true
  needs:
  - kube-system/argocd-namespace
  - {{ .Values | getOrNil "argocd.namespace" | default "argocd" }}/argocd
  labels:
    chart: argocd-ingress
    component: ingress
    namespace: {{ .Values | getOrNil "argocd.namespace" | default "argocd" }}
  values:
  - zone: internal
    app: argocd
    dnsRoot: {{ .Values | getOrNil "dnsRoot" | default "micro.svc" }}
    ingressClassMap:
      internal: {{ .Values | getOrNil "ingress.internal.class" | default "internal" }}
    ingress:
      enabled: true
      tlsEnabled: true
      annotations:
        traefik.ingress.kubernetes.io/pass-tls-cert: "true"
      hosts:
      - secretName: argocd-ingress
        config:
          http:
            paths:
            - path: "/"
              backend:
                serviceName: argocd-server
                servicePort: 80
