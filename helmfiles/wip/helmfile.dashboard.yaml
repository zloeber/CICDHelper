---
bases:
- ../config/environments.yaml
- ../config/helmdefaults.yaml
- ../config/{{ .Environment.Name }}/repositories.yaml
---

releases:
- name: namespace-dashboard
  chart: {{ .Values | getOrNil "archetype.chart" | default "zloeber/archetype" }}
  namespace: kube-system
  labels:
    chart: namespace-dashboard
    component: dashboard
    namespace: kube-system
  wait: true
  installed: true
  values:
  - app: kubernetes-dashboard
    namespace:
      enabled: true
      name: kubernetes-dashboard

- name: kubernetes-dashboard
  chart: incubator/raw
  namespace: kubernetes-dashboard
  installed: true
  needs:
  - kube-system/namespace-dashboard
  values:
  - resources:
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        labels:
          k8s-app: kubernetes-dashboard
        name: kubernetes-dashboard
        namespace: kubernetes-dashboard
    - apiVersion: v1
      kind: Service
      metadata:
        labels:
          k8s-app: kubernetes-dashboard
        name: kubernetes-dashboard
        namespace: kubernetes-dashboard
      spec:
        ports:
          - port: 443
            targetPort: 8443
        selector:
          k8s-app: kubernetes-dashboard
    - apiVersion: v1
      kind: Secret
      metadata:
        labels:
          k8s-app: kubernetes-dashboard
        name: kubernetes-dashboard-certs
        namespace: kubernetes-dashboard
      type: Opaque
    - apiVersion: v1
      kind: Secret
      metadata:
        labels:
          k8s-app: kubernetes-dashboard
        name: kubernetes-dashboard-csrf
        namespace: kubernetes-dashboard
      type: Opaque
      data:
        csrf: ""
    - apiVersion: v1
      kind: Secret
      metadata:
        labels:
          k8s-app: kubernetes-dashboard
        name: kubernetes-dashboard-key-holder
        namespace: kubernetes-dashboard
      type: Opaque
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        labels:
          k8s-app: kubernetes-dashboard
        name: kubernetes-dashboard-settings
        namespace: kubernetes-dashboard
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        labels:
          k8s-app: kubernetes-dashboard
        name: kubernetes-dashboard
        namespace: kubernetes-dashboard
      rules:
        # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
        - apiGroups: [""]
          resources: ["secrets"]
          resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs", "kubernetes-dashboard-csrf"]
          verbs: ["get", "update", "delete"]
          # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
        - apiGroups: [""]
          resources: ["configmaps"]
          resourceNames: ["kubernetes-dashboard-settings"]
          verbs: ["get", "update"]
          # Allow Dashboard to get metrics.
        - apiGroups: [""]
          resources: ["services"]
          resourceNames: ["metrics-server", "dashboard-metrics-scraper"]
          verbs: ["proxy"]
        - apiGroups: [""]
          resources: ["services/proxy"]
          resourceNames: ["metrics-server", "http:metrics-server:", "https:metrics-server:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
          verbs: ["get"]
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          k8s-app: kubernetes-dashboard
        name: kubernetes-dashboard
      rules:
        # Allow Metrics Scraper to get metrics from the Metrics server
        - apiGroups: ["metrics.k8s.io"]
          resources: ["pods", "nodes"]
          verbs: ["get", "list", "watch"]
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        labels:
          k8s-app: kubernetes-dashboard
        name: kubernetes-dashboard
        namespace: kubernetes-dashboard
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: kubernetes-dashboard
      subjects:
        - kind: ServiceAccount
          name: kubernetes-dashboard
          namespace: kubernetes-dashboard
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: kubernetes-dashboard
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: kubernetes-dashboard
      subjects:
        - kind: ServiceAccount
          name: kubernetes-dashboard
          namespace: kubernetes-dashboard
    - apiVersion: apps/v1
      kind: Deployment
      metadata:
        labels:
          k8s-app: kubernetes-dashboard
        name: kubernetes-dashboard
        namespace: kubernetes-dashboard
      spec:
        replicas: 1
        revisionHistoryLimit: 10
        selector:
          matchLabels:
            k8s-app: kubernetes-dashboard
        template:
          metadata:
            labels:
              k8s-app: kubernetes-dashboard
          spec:
            containers:
              - name: kubernetes-dashboard
                image: kubernetesui/dashboard:v2.0.0-beta8
                imagePullPolicy: Always
                ports:
                  - containerPort: 8443
                    protocol: TCP
                args:
                  - --auto-generate-certificates
                  - --namespace=kubernetes-dashboard
                  # Uncomment the following line to manually specify Kubernetes API server Host
                  # If not specified, Dashboard will attempt to auto discover the API server and connect
                  # to it. Uncomment only if the default does not work.
                  # - --apiserver-host=http://my-address:port
                volumeMounts:
                  - name: kubernetes-dashboard-certs
                    mountPath: /certs
                    # Create on-disk volume to store exec logs
                  - mountPath: /tmp
                    name: tmp-volume
                livenessProbe:
                  httpGet:
                    scheme: HTTPS
                    path: /
                    port: 8443
                  initialDelaySeconds: 30
                  timeoutSeconds: 30
                securityContext:
                  allowPrivilegeEscalation: false
                  readOnlyRootFilesystem: true
                  runAsUser: 1001
                  runAsGroup: 2001
            volumes:
              - name: kubernetes-dashboard-certs
                secret:
                  secretName: kubernetes-dashboard-certs
              - name: tmp-volume
                emptyDir: {}
            serviceAccountName: kubernetes-dashboard
            nodeSelector:
              "beta.kubernetes.io/os": linux
            # Comment the following tolerations if Dashboard must not be deployed on master
            tolerations:
              - key: node-role.kubernetes.io/master
                effect: NoSchedule
    - apiVersion: v1
      kind: Service
      metadata:
        labels:
          k8s-app: dashboard-metrics-scraper
        name: dashboard-metrics-scraper
        namespace: kubernetes-dashboard
      spec:
        ports:
          - port: 8000
            targetPort: 8000
        selector:
          k8s-app: dashboard-metrics-scraper
    - apiVersion: apps/v1
      kind: Deployment
      metadata:
        labels:
          k8s-app: dashboard-metrics-scraper
        name: dashboard-metrics-scraper
        namespace: kubernetes-dashboard
      spec:
        replicas: 1
        revisionHistoryLimit: 10
        selector:
          matchLabels:
            k8s-app: dashboard-metrics-scraper
        template:
          metadata:
            labels:
              k8s-app: dashboard-metrics-scraper
            annotations:
              seccomp.security.alpha.kubernetes.io/pod: 'runtime/default'
          spec:
            containers:
              - name: dashboard-metrics-scraper
                image: kubernetesui/metrics-scraper:v1.0.1
                ports:
                  - containerPort: 8000
                    protocol: TCP
                livenessProbe:
                  httpGet:
                    scheme: HTTP
                    path: /
                    port: 8000
                  initialDelaySeconds: 30
                  timeoutSeconds: 30
                volumeMounts:
                - mountPath: /tmp
                  name: tmp-volume
                securityContext:
                  allowPrivilegeEscalation: false
                  readOnlyRootFilesystem: true
                  runAsUser: 1001
                  runAsGroup: 2001
            serviceAccountName: kubernetes-dashboard
            nodeSelector:
              "beta.kubernetes.io/os": linux
            # Comment the following tolerations if Dashboard must not be deployed on master
            tolerations:
              - key: node-role.kubernetes.io/master
                effect: NoSchedule
            volumes:
              - name: tmp-volume
                emptyDir: {}
# - name: "kubernetes-dashboard"
#   namespace: kube-system
#   labels:
#     chart: "kubernetes-dashboard"
#     repo: "stable"
#     component: "monitoring"
#     namespace: "kube-system"
#     vendor: "kubernetes"
#   chart: "stable/kubernetes-dashboard"
#   version: "1.10.1"
#   wait: true
#   installed: true
#   values:
#   - image:
#       repository: k8s.gcr.io/kubernetes-dashboard-amd64
#       tag: {{ env "STACK_DASHBOARD_IMAGE_TAG" | default "v1.10.1" }}
#       pullPolicy: IfNotPresent
#     enableInsecureLogin: {{ env "STACK_DASHBOARD_ENABLE_INSECURE_LOGIN" | default "true"}}
# {{- if eq (env "STACK_DASHBOARD_ENABLE_INSECURE_LOGIN" | default "true") "true" }}
#     service:
#       externalPort: 80
# {{- end }}
# {{- if eq (env "STACK_DASHBOARD_SKIP_LOGIN" | default "true") "true" }}
#     extraArgs:
#       - --enable-skip-login
# {{- end }}
#     replicaCount: '{{ env "STACK_DASHBOARD_REPLICA_COUNT" | default 1 }}'
#     resources:
#       limits:
#         cpu: '{{ env "STACK_DASHBOARD_LIMIT_CPU" | default "100m" }}'
#         memory: '{{ env "STACK_DASHBOARD_LIMIT_MEMORY" | default "100Mi" }}'
#       requests:
#         cpu: '{{ env "STACK_DASHBOARD_REQUEST_CPU" | default "50m" }}'
#         memory: '{{ env "STACK_DASHBOARD_REQUEST_MEMORY" | default "50Mi" }}'
#     rbac:
#       create: {{ .Values.kube.rbac }}
#     serviceAccount:
#       create: false
#       name: kubernetes-dashboard
#     ingress:
#       enabled: false

# - name: rbac-dashboard-service
#   chart: incubator/raw
#   namespace: "kube-system"
#   installed: true
#   values:
#   - resources:
#     - kind: RBACDefinition
#       apiVersion: rbacmanager.reactiveops.io/v1beta1
#       metadata:
#         name: rbac-dashboard-service
#       rbacBindings:
#         - name: cluster-admins
#           subjects:
#             - kind: ServiceAccount
#               name: kubernetes-dashboard
#               namespace: "kube-system"
#           clusterRoleBindings:
#             - clusterRole: cluster-admin

{{- if .Values.ingress.installed }}
- name: ingress-kubernetes-dashboard
  namespace: kubernetes-dashboard
  chart: {{ .Values | getOrNil "archetype.chart" | default "zloeber/archetype" }}
  version: {{ .Values | getOrNil "archetype.version" | default "0.0.1" }}
  installed: true
  needs:
  - kube-system/namespace-dashboard
  labels:
    chart: ingress-dashboard
    component: ingress
    namespace: kubernetes-dashboard
  values:
  - zone: internal
    app: kubernetes-dashboard
    ingressClassMap:
      internal: {{ .Values | getOrNil "ingress.internal.class" | default "internal" }}
    # certificate:
    #   enabled: true
    #   name: dashboard-ingress-cert
    #   selfSigned: true
    #   commonName: dashboard.{{ .Values | getOrNil "ingress.internal.zone" | default "int.micro.svc" }}
    #   isCA: false
    ingress:
      enabled: true
      tlsEnabled: true
      hosts:
      - name: dashboard.{{ .Values | getOrNil "ingress.internal.zone" | default "int.micro.svc" }}
        secretName: ingress-kubernetes-dashboard
        config:
          http:
            paths:
            - path: "/"
              backend:
                serviceName: kubernetes-dashboard
                servicePort: 443
{{- end }}
